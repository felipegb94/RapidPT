{
  "name": "Rapidpt",
  "tagline": "Rapid Permutation Testing using Matrix Completion Methods",
  "body": "# RapidPT\r\n## Table of Contents\r\n1. [Overview](#overview)\r\n2. [Use Cases](#usecases)\r\n3. [Setup](#setup)\r\n4. [Usage](#usage)\r\n5. [Usage within SnPM] (#usagesnpm)\r\n  * [Prerequisites](#snpmprerequisites)\r\n  * [SnPM + RapidPT Setup](#snpmrapidptsetup)\r\n  * [Usage](#snpmusage)\r\n  * [Outputs Info](#snpmoutputs)\r\n  * [Important Notes](#snpmnotes)\r\n6. [Code Organization](#codeorganization)\r\n7. [Warnings](#warnings)\r\n8. [References](#references)\r\n\r\n\r\n<a name=\"overview\">\r\n## Overview\r\n</a>\r\n\r\nMultiple hypothesis testing is a problem when applying statistical tests on neuroimaging studies. Permutation testing is a nonparametric method for estimating an alpha threshold that can accurately help identify what brain regions display statistically significant differences or activity. The computational burden of this method, however, for low thresholds and large datasets can be prohibitive.\r\n\r\n**RapidPT** is a MATLAB toolbox for fast, reliable, hardware independent, permutation testing. \r\n\r\n**1. Fast:** RapidPT has shown speedups ranging from **30-90x** faster than simple permutation testing implementations, and **3-6x** faster than SnPM, a state of the art permutation testing toolbox for neuroimaging data. The larger speedups are seen when the number of permutations being done exceeds 10,000, and the size of the dataset is larger than 20 subjects.\r\n\r\nhttps://raw.githubusercontent.com/felipegb94/RapidPT/master/images/FirstSetNaivePT_Speedups_80000.png\r\n<table style=\"width:100%\">\r\n  <tr>\r\n    <td><img src=\"https://raw.githubusercontent.com/felipegb94/RapidPT/master/images/FirstSetNaivePT_Speedups_80000.png\" alt=\"SpeedupNaivePT\"/></td>\r\n    <td><img src=\"https://raw.githubusercontent.com/felipegb94/RapidPT/master/images/FirstSet_Speedups_160000.png\" alt=\"SpeedupSnPM\"/></td>\r\n  </tr>\r\n</table>\r\n\r\n**2. Reliable:** RapidPT has been validated against SnPM and a personal permutation testing implementation. The validation was done by comparing the KL-Divergence and p-values of the maximum-null distribution recovered by each software. More than **200 validation runs** have been done with various neuroimaging datasets composed from 10 up to 400 subjects. \r\n\r\n<table style=\"width:100%\">\r\n  <tr>\r\n    <td><img src=\"https://raw.githubusercontent.com/felipegb94/RapidPT/master/images/FirstSet_KLDiv_160000.png\" alt=\"KLDivSnPM\"/></td>\r\n    <td><img src=\"https://raw.githubusercontent.com/felipegb94/RapidPT/master/images/FirstSet_KLDivNaivePT_10000.png\" alt=\"KLDivNaivePT\"/></td>\r\n  </tr>\r\n</table>\r\n\r\n\r\n\r\n**3. Hardware Independent:** It has been shown that with powerful enough hardware (highend GPUs or a cluster) and an efficient implementation, the permutation testing procedure can be spedup by many orders of magnitude. These implementations highly rely on expensive hardware. RapidPT, however, takes advantage of the structure of the problem to speedup the algorithm, allowing it to be efficient even in regular laptops.\r\n\r\n<a name=\"usecases\">\r\n## Use cases\r\n</a>\r\nRapidPT can be used for the nonparametric statistical analysis of neuroimaging data. The permutation testing procedure modeled by RapidPT is a nonparametric combination of two-sample t-test. Two sample t-test are typically used to determine if two population means are equal. Various use cases in neuroimaging and similar applications show up here such as:\r\n\r\n**1. Placebo-Control Clinical Trials:** Detect statistically significant difference between the brain images of the subjects assigned to the placebo and control groups.\r\n\r\n**2. Activation Studies:** Detect statistically significant differences between the brain images of subjects during activation vs. during rest.\r\n\r\n**Note to users:** Feel free to add more use cases.\r\n\r\n<a name=\"setup\">\r\n## Setup\r\n</a>\r\nSimply clone the repository and add the path of the repository inside your program to be able to call the functions.\r\n\r\n```\r\naddpath('PATH_WHERE_YOU_CLONED_THE_REPOSITORY');\r\n%% YOUR MATLAB PROGRAM GOES HERE. \r\n```\r\n\r\nIf you don't want to have the `addpath` line in every program you make, you can have it in your `startup.m` file for you MATLAB setup.\r\n\r\n<a name=\"usage\">\r\n## Usage\r\n</a>\r\nThere are two ways to use the core of RapidPT, either by calling the wrapper function `TwoSampleRapidPT.m` or directly calling the core function `RapidPT.m`. `TwoSampleRapidPT` assigns some default inputs that have been extensively tested that produce an accurate recovery of the maxnull distribution and then calls `RapidPT`. On the other hand if you call `RapidPT` directly you will have to assign these parameters. Let's first go through `Example_TwoSampleRapidPT.m`:\r\n\r\n#### `Example_TwoSampleRapidPT.m`\r\n1. First add the path to where you cloned/downloaded the `RapidPT` repository, and also load the data you will be working with. The data matrix needs to be an `NxV`, where `N` is the total number of subjects and V is the number of voxel statistics per subject.\r\n\r\n\t\tRapidPTLibraryPath = '.';\r\n\t\taddpath(RapidPTLibraryPath);\r\n\t\tdataPath = 'PATH TO DATA'; \r\n\t\tload(dataPath);\r\n        \r\n2. Set number of permutations and the number of subjects in either group 1 or 2 (it does not matter which one you specify).\r\n\r\n\t\tnumPermutations = 5000;\r\n\t\tnGroup1 = 25; % You should what is the size of one of your groups prior.\r\n\r\n3. Set `write`. If set to 0, outputs will only contain the constructed maximum null distribution. If set to 1, the outputs struct will contain the basis matrix, `U`, and coefficient matrix `W`. `U*W` recover the permutation matrix. For an in depth explanation see the references. \r\n4. Call `TwoSampleRapidPT.m`. `outputs` is a struct containing `outputs.MaxT`,`outputs.U`, and `outputs.W`. `timings` is a struct containing timing information of different part of `RapidPT` as well as the total timing.\r\n\r\n\t\t[outputs, timings] = TwoSampleRapidPT(Data, numPermutations, nGroup1, write, RapidPTLibraryPath);\r\n\r\n5. Optionally save `outputs` and `timings`.\r\n6. Get the t-threshold estimate from the recovered maximum null distribution.\r\n\r\n\t\talpha_threshold = 1; % 1 percent\r\n\t\tt_threshold = GetTThresh(outputs.MaxT, alpha_threshold);\r\n\t\t\r\n7. If you have the labels of the data available, you can calculate the two-sample t-test and see compare the result of each voxel to the t-threshold and see which voxels exhibit statistically significant activity.\r\n\r\n#### `Example_RapidPT.m`\r\nTake a look at the header comments of `RapidPT.m` and the comments in `Example_RapidPT.m` to see how to directly call `RapidPT.m`. It is recommended to use `TwoSampleRapidPT.m` in order to avoid hyperparameter tuning.\r\n\r\n<a name=\"usagesnpm\">\r\n## Usage within SnPM\r\n</a>\r\n<a name=\"snpmprerequisites\">\r\n### Prerequistes\r\n</a>\r\n* [SPM12](http://www.fil.ion.ucl.ac.uk/spm/software/) - In order to be able to use RapidPT within SPM/SnPM you will need to have SPM12 setup (obviously). \r\n* [NiFTI] (http://www.mathworks.com/matlabcentral/fileexchange/8797-tools-for-nifti-and-analyze-image) - You will also need the NiFTI toolset. Make sure the NiFTI toolset path is added before you run SnPM.\r\n* Git (recommended) - The setup below uses git to clone the repositories. Instead of cloning them you can also download the zip files from the links given throughout the setup instructions.\r\n\r\n<a name=\"snpmrapidptsetup\">\r\n### SnPM + RapidPT Setup\r\n</a>\r\nCurrently to use RapidPT within SnPM you will have to [download my fork of SnPM](https://github.com/felipegb94/SnPM-devel) (personal copy of SnPM). To do this, go to wherever your SPM installation/folder is (mine is under my MATLAB folder) and do the following commands:\r\n\r\n```\r\ncd WHEREVER YOUR SPM DOWNLOAD IS\r\ncd spm12/toolbox/\r\ngit clone https://github.com/felipegb94/SnPM-devel.git\r\ncd SnPM-devel/\r\n```\r\n\r\nThen we have to make a quick change to `snpm_cp.m` in order to be able to use RapidPT. In line `781` you will have to change \r\n\r\n```\r\nRapidPT_path = ~/PermTest/RapidPT/\r\n```\r\n\r\nto the path where you downloaded `RapidPT`. For example, you can do the following\r\n\r\n```\r\ncd ~/\r\ngit clone https://github.com/felipegb94/RapidPT.git\r\n```\r\n\r\nHere we just downloaded RapidPT to you home folder, and then go into `snpm_cp.m` and change the `RapidPT_path` variable:\r\n\r\n```\r\nRapidPT_path = ~/RapidPT/\r\n```\r\n\r\nSave `snpm_cp.m` and, now in the MATLAB command line you can launch SPM and use RapidPT.\r\n\r\n<a name=\"snpmusage\">\r\n### SnPM Usage\r\n</a>\r\n\r\nThis would be a good time to read the important notes below. \r\n\r\nNow that you have setup RapidPT within SnPM, SnPM will work very similar to before. Launch SPM,\r\n\r\n```\r\nspm fmri\r\n```\r\n\r\nNow follow these steps:\r\n\r\n1. Go to SPM Menu window.\r\n2. Click on Batch and go to the batch window that just opened.\r\n3. On the navigation bar click on SPM, then `tools/SnPM/Specify/2 Groups Two Sample T test; 1 scan per subject`.\r\n4. Here you will be able to specifiy a folder where you want your outputs to be (`Analysis Directory`), your input data (.nii images of group1 and group2), and also the number of permutations you want to do. \r\n5. Click the green run button. This creates an SnPM config file in the path where you want your outputs to be. This step should take a few seconds only.\r\n6. Go to SPM navigation bar again, then `Tools/SnPM/Compute`\r\n7. Set the SnPM cfg file to the one you just made by clicking on the run button. \r\n8. Click the green run button again, and now SnPM will run with RapidPT.\r\n9. Once you are done, go to the directory that you selected as your `Analysis Directory` and look at the outputs.\r\n\r\n<a name=\"snpmoutputs\">\r\n### Outputs\r\n</a>\r\nOnce you are done, inside your `analysis` directory you will find a folder called `outputs`. This folder contains the results from RapidPT:\r\n\r\n*  `MaxT.mat`: This is the recovered maximum null distribution.\r\n*  `SnPMt.mat`: This is the resulting test statistic calculated using the original labels of the data. \r\n*  `XYZ.mat`: This matrix has the x, y, z coordinates associated to each voxel.\r\n*  `params.mat`: This structure contains the following parameters of the permutation testing run: nPerm (number of permutations), N (number of subjects), V (number of voxels after preprocessing), xdim, ydim, zdim.\r\n*  `coords_activeBrain_0.05.mat`: This contains the x,y,z coordinates of the voxels that were found to be displaying significant group differences with a significance level of alpha = 0.05.\r\n*  `activeBrain_0.05.nii`: This is a binary brain nii file. The 1's are the voxels that were found to display significant group differences. \r\n*  `timings.mat`: Contains some timing from rapidpt. \r\n\r\n<a name=\"snpmnotes\">\r\n###Improtant Notes (PLEASE READ BEFORE USING):\r\n</a>\r\n\r\n* RapidPT is only available for TwoSample t-test right now because it is the procedure that has been extensively validated and benchmarked. Regular SnPM should run if you try running SnPM with any other tests.\r\n\r\n* I integrated RapidPT into SnPM for users to be able to take advantages of SPM/SnPM graphical user interface and pre-processing. If you run SnPM with RapitPT, however, you will not be able to take advantage of any of SnPM/SPM postprocessing features because RapidPT when doing the permutation tests does not generate all of the required data for SnPM to use. If RapidPT is fully integrated into SnPM, then we will make sure that the post-processing capabilities of SnPM are also available.\r\n\r\n\r\n\r\n<a name=\"codeorganization\">\r\n## Code Organization\r\n</a>\r\n### RapidPT\r\n\r\n#### `RapidPT.m`\r\nThis is the core of RapidPT. This is where the main algorithm and math ideas described in the NIPS paper happen.\r\n#### `TwoSampleRapidPT.m`\r\nThis is a wrapper of the core. This function will assign most of the hyperparameters that can be given to `RapidPT.m` for you. The hyperparameters chosen have been extensively tested, and some of them are derived from the data dimensions and number of permutations chosen.\r\n#### `Example_TwoSampleRapidPT.m`\r\nThis is an example script that uses `TwoSampleRapidPT.m` wrapper program.\r\n#### `Example_RapidPT.m`\r\nThis is an example script that directly uses `RapidPT.m`. You will note that a lot more hyperparameters need to be passed to `RapidPT.m` compared to `TwoSampleRapidPT.m`.\r\n#### `TwoSampleGetLabelsMatrices.m`\r\nThis is a function that given: `numPermutations` (Number of Permutations to be done), `N` (total number of subjects), `nGroup1` (The number of subjects in group1), returns the labels for each subject in each group that will be used at each permutation. \r\n\r\n### include/\r\nThe `include/` folder contains the library *grasta*. This library contains the online matrix completion method we use to accelerate permutation testing. For more information about *grasta* you can refer to the [project website](https://sites.google.com/site/hejunzz/grasta#TOC-Robust-Matrix-Completion).\r\n\r\n### outputs/ & timings/\r\nThese are the default directories used to output the resulting max-null distribution, and timings of different sections of the algorithm. If the flag `inputs.write` is set to `1` the low-rank basis, `U`, and the coefficient matrix, `W`, that can recover the permutation matrix will also be saved.\r\n\r\n### util/\r\nThis directory contains various utility functions used by RapidPT for input validation and post-processing. Separating these functions from the main code makes `TwoSampleRapidPT.m` more concise.\r\n  \r\n<a name=\"warnings\">\r\n## Warnings\r\n</a>\r\nRapidPT has been extensively tested on medium and large datasets (20+ subjects) of a specific flavor. The datasets have been composed of group1 and group2 type data. Additionally these datasets after preprocessing give 300,000+ voxel statistics. Hence speedups/accuracy seen here have been on these types of datasets, and it might not make sense to use RapidPT on smaller datasets since the permutation testing procedure would take only a few minutes compared to days/hours.\r\n\r\n \r\n<a name=\"references\">\r\n## References\r\n</a>\r\nRapidPT is based on the paper, Speeding up Permutation Testing in Neuroimaging, presented at NIPS, 2013.\r\n\r\nC. Hinrichs, V. K. Ithapu, Q. Sun, V. Singh, S. C. Johnson, Speeding up Permutation Testing in Neuroimaging, Neural Information Processing Systems (NIPS), 2013.\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}